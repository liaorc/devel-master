--#
--#       Gpu PreAggregate Explain TestCases
--#
-- global configuration
set pg_strom.gpu_setup_cost to 0;
set pg_strom.debug_force_gpupreagg to on;
set pg_strom.enable_gpusort to off;
set client_min_messages to warning;
-- explain normal case
set pg_strom.enabled=off;
explain (verbose, costs off, timing off) select key,avg(smlint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(smlint_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(smlint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(smlint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(smlint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(smlint_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(smlint_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(smlint_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(smlint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(smlint_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(smlint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(smlint_x,smlint_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((smlint_x)::double precision, (smlint_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((smlint_x)::double precision, (smlint_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlint_x,smlint_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((smlint_x)::double precision, (smlint_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((smlint_x)::double precision, (smlint_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlint_x,smlint_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((smlint_x)::double precision, (smlint_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((smlint_x)::double precision, (smlint_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(integer_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(integer_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(integer_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(integer_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(integer_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(integer_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(integer_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(integer_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(integer_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(integer_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(integer_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(integer_x,integer_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((integer_x)::double precision, (integer_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((integer_x)::double precision, (integer_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(integer_x,integer_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((integer_x)::double precision, (integer_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((integer_x)::double precision, (integer_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(integer_x,integer_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((integer_x)::double precision, (integer_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((integer_x)::double precision, (integer_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(bigint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(bigint_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(bigint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(bigint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(bigint_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(bigint_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(bigint_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(bigint_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(bigint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(bigint_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(bigint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigint_x,bigint_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((bigint_x)::double precision, (bigint_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((bigint_x)::double precision, (bigint_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigint_x,bigint_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((bigint_x)::double precision, (bigint_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((bigint_x)::double precision, (bigint_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigint_x,bigint_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((bigint_x)::double precision, (bigint_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((bigint_x)::double precision, (bigint_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(real_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(real_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(real_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(real_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(real_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(real_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(real_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(real_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(real_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(real_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(real_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(real_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(real_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(real_x,real_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((real_x)::double precision, (real_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((real_x)::double precision, (real_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(real_x,real_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((real_x)::double precision, (real_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((real_x)::double precision, (real_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(real_x,real_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((real_x)::double precision, (real_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((real_x)::double precision, (real_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(float_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(float_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(float_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(float_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(float_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(float_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(float_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(float_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(float_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(float_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(float_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(float_x,float_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr(float_x, float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr(float_x, float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(float_x,float_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop(float_x, float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop(float_x, float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(float_x,float_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp(float_x, float_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp(float_x, float_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(nume_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(nume_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(nume_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(nume_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(nume_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(nume_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(nume_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(nume_x,nume_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((nume_x)::double precision, (nume_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((nume_x)::double precision, (nume_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(nume_x,nume_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((nume_x)::double precision, (nume_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((nume_x)::double precision, (nume_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(nume_x,nume_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((nume_x)::double precision, (nume_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((nume_x)::double precision, (nume_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(smlsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(smlsrl_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(smlsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(smlsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(smlsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(smlsrl_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(smlsrl_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(smlsrl_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(smlsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(smlsrl_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(smlsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(smlsrl_x,smlsrl_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((smlsrl_x)::double precision, (smlsrl_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((smlsrl_x)::double precision, (smlsrl_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlsrl_x,smlsrl_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((smlsrl_x)::double precision, (smlsrl_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((smlsrl_x)::double precision, (smlsrl_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlsrl_x,smlsrl_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((smlsrl_x)::double precision, (smlsrl_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((smlsrl_x)::double precision, (smlsrl_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(serial_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(serial_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(serial_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(serial_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(serial_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(serial_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(serial_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(serial_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(serial_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(serial_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(serial_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(serial_x,serial_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((serial_x)::double precision, (serial_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((serial_x)::double precision, (serial_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(serial_x,serial_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((serial_x)::double precision, (serial_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((serial_x)::double precision, (serial_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(serial_x,serial_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((serial_x)::double precision, (serial_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((serial_x)::double precision, (serial_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,avg(bigsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(bigsrl_x)          from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, count(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,max(bigsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(bigsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(bigsrl_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(bigsrl_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(bigsrl_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(bigsrl_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(bigsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(bigsrl_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(bigsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigsrl_x,bigsrl_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((bigsrl_x)::double precision, (bigsrl_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, corr((bigsrl_x)::double precision, (bigsrl_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigsrl_x,bigsrl_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((bigsrl_x)::double precision, (bigsrl_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_pop((bigsrl_x)::double precision, (bigsrl_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigsrl_x,bigsrl_x) from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((bigsrl_x)::double precision, (bigsrl_x)::double precision))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, covar_samp((bigsrl_x)::double precision, (bigsrl_x)::double precision)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

set pg_strom.enabled=on;
explain (verbose, costs off, timing off) select key,avg(smlint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg((pgstrom.nrows((smlint_x IS NOT NULL))), (pgstrom.psum((smlint_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg((pgstrom.nrows((smlint_x IS NOT NULL))), (pgstrom.psum((smlint_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((smlint_x IS NOT NULL)), pgstrom.psum((smlint_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(smlint_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((smlint_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((smlint_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((smlint_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(smlint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(smlint_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(smlint_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(smlint_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(smlint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(smlint_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(smlint_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(smlint_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(smlint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.sum((pgstrom.psum((smlint_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.sum((pgstrom.psum((smlint_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum((smlint_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(smlint_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(smlint_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(smlint_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(smlint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(smlint_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(smlint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(smlint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(smlint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(smlint_x,smlint_x) from strom_test group by key order by key;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlint_x,smlint_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlint_x,smlint_x) from strom_test group by key order by key;
                                                                                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                                                                                        

 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(integer_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg((pgstrom.nrows((integer_x IS NOT NULL))), (pgstrom.psum((integer_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg((pgstrom.nrows((integer_x IS NOT NULL))), (pgstrom.psum((integer_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((integer_x IS NOT NULL)), pgstrom.psum((integer_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(integer_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((integer_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((integer_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((integer_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(integer_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(integer_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(integer_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(integer_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(integer_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(integer_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(integer_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(integer_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(integer_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.sum((pgstrom.psum((integer_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.sum((pgstrom.psum((integer_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum((integer_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(integer_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(integer_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(integer_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(integer_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(integer_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(integer_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(integer_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(integer_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(integer_x,integer_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(integer_x,integer_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(integer_x,integer_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(bigint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg_int8((pgstrom.nrows((bigint_x IS NOT NULL))), (pgstrom.psum(bigint_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg_int8((pgstrom.nrows((bigint_x IS NOT NULL))), (pgstrom.psum(bigint_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((bigint_x IS NOT NULL)), pgstrom.psum(bigint_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(bigint_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((bigint_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((bigint_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((bigint_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(bigint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(bigint_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(bigint_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(bigint_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(bigint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(bigint_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(bigint_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(bigint_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(bigint_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum((pgstrom.psum(bigint_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum((pgstrom.psum(bigint_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum(bigint_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(bigint_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(bigint_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(bigint_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(bigint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(bigint_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(bigint_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(bigint_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(bigint_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigint_x,bigint_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigint_x,bigint_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigint_x,bigint_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(real_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(real_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((real_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((real_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(real_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(real_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(real_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(real_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(real_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(real_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(real_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(real_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(real_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum((pgstrom.psum(real_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum((pgstrom.psum(real_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum(real_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(real_x)         from strom_test group by key order by key;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.stddev((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.stddev((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(real_x)     from strom_test group by key order by key;
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.stddev_pop((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.stddev_pop((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(real_x)    from strom_test group by key order by key;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.stddev_samp((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.stddev_samp((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,variance(real_x)       from strom_test group by key order by key;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.variance((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.variance((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,var_pop(real_x)        from strom_test group by key order by key;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.var_pop((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.var_pop((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,var_samp(real_x)       from strom_test group by key order by key;
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.var_samp((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.var_samp((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(real_x,real_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(real_x,real_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(real_x,real_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(float_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(float_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((float_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((float_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(float_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(float_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(float_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum((pgstrom.psum(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum((pgstrom.psum(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(float_x)         from strom_test group by key order by key;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.stddev((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.stddev((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(float_x)     from strom_test group by key order by key;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.stddev_pop((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.stddev_pop((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(float_x)    from strom_test group by key order by key;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.stddev_samp((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.stddev_samp((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,variance(float_x)       from strom_test group by key order by key;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.variance((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.variance((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,var_pop(float_x)        from strom_test group by key order by key;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.var_pop((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.var_pop((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,var_samp(float_x)       from strom_test group by key order by key;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.var_samp((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.var_samp((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(float_x,float_x) from strom_test group by key order by key;
                                                                                                                                                      QUERY PLAN                                                                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_x), pgstrom.pcov_x2(true, float_x, float_x), pgstrom.pcov_y(true, float_x, float_x), pgstrom.pcov_y2(true, float_x, float_x), pgstrom.pcov_xy(true, float_x, float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(float_x,float_x) from strom_test group by key order by key;
                                                                                                                                                         QUERY PLAN                                                                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_x), pgstrom.pcov_x2(true, float_x, float_x), pgstrom.pcov_y(true, float_x, float_x), pgstrom.pcov_y2(true, float_x, float_x), pgstrom.pcov_xy(true, float_x, float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(float_x,float_x) from strom_test group by key order by key;
                                                                                                                                                         QUERY PLAN                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_x), pgstrom.pcov_x2(true, float_x, float_x), pgstrom.pcov_y(true, float_x, float_x), pgstrom.pcov_y2(true, float_x, float_x), pgstrom.pcov_xy(true, float_x, float_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, avg(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,count(nume_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((nume_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((nume_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((nume_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,min(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,sum(nume_x)            from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev(nume_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(nume_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(nume_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(nume_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(nume_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(nume_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(nume_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(nume_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(nume_x,nume_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(nume_x,nume_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(nume_x,nume_x) from strom_test group by key order by key;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(smlsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg((pgstrom.nrows((smlsrl_x IS NOT NULL))), (pgstrom.psum((smlsrl_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg((pgstrom.nrows((smlsrl_x IS NOT NULL))), (pgstrom.psum((smlsrl_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((smlsrl_x IS NOT NULL)), pgstrom.psum((smlsrl_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(smlsrl_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((smlsrl_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((smlsrl_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((smlsrl_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(smlsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(smlsrl_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(smlsrl_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(smlsrl_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(smlsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(smlsrl_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(smlsrl_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(smlsrl_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(smlsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.sum((pgstrom.psum((smlsrl_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.sum((pgstrom.psum((smlsrl_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum((smlsrl_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(smlsrl_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(smlsrl_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(smlsrl_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(smlsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(smlsrl_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(smlsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(smlsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(smlsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(smlsrl_x,smlsrl_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlsrl_x,smlsrl_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlsrl_x,smlsrl_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(serial_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg((pgstrom.nrows((serial_x IS NOT NULL))), (pgstrom.psum((serial_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg((pgstrom.nrows((serial_x IS NOT NULL))), (pgstrom.psum((serial_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((serial_x IS NOT NULL)), pgstrom.psum((serial_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(serial_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((serial_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((serial_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((serial_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(serial_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(serial_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(serial_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(serial_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(serial_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(serial_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(serial_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(serial_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(serial_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.sum((pgstrom.psum((serial_x)::bigint))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.sum((pgstrom.psum((serial_x)::bigint)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum((serial_x)::bigint)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(serial_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(serial_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(serial_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(serial_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(serial_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(serial_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(serial_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(serial_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(serial_x,serial_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(serial_x,serial_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(serial_x,serial_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,avg(bigsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.avg_int8((pgstrom.nrows((bigsrl_x IS NOT NULL))), (pgstrom.psum(bigsrl_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.avg_int8((pgstrom.nrows((bigsrl_x IS NOT NULL))), (pgstrom.psum(bigsrl_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((bigsrl_x IS NOT NULL)), pgstrom.psum(bigsrl_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,count(bigsrl_x)          from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((bigsrl_x IS NOT NULL)))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((bigsrl_x IS NOT NULL))))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((bigsrl_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,max(bigsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(bigsrl_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(bigsrl_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(bigsrl_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,min(bigsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(bigsrl_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(bigsrl_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(bigsrl_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,sum(bigsrl_x)            from strom_test group by key order by key;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (sum((pgstrom.psum(bigsrl_x))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, sum((pgstrom.psum(bigsrl_x)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.psum(bigsrl_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,stddev(bigsrl_x)         from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_pop(bigsrl_x)     from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_pop(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_pop(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,stddev_samp(bigsrl_x)    from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (stddev_samp(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, stddev_samp(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,variance(bigsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (variance(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, variance(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_pop(bigsrl_x)        from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_pop(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_pop(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,var_samp(bigsrl_x)       from strom_test group by key order by key;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (var_samp(bigsrl_x))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, var_samp(bigsrl_x)
         Group Key: strom_test.key
         ->  Seq Scan on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigsrl_x,bigsrl_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigsrl_x,bigsrl_x) from strom_test group by key order by key;
                                                                                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                                                                                       

 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigsrl_x,bigsrl_x) from strom_test group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision))))
   Sort Key: strom_test.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)))
         Group Key: strom_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_test
                     Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

--explain aggregate function for statistic query case.
set pg_strom.enabled=off;
explain (verbose, costs off, timing off) select key,corr(smlint_x,smlint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((smlint_x)::double precision, (smlint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((smlint_x)::double precision, (smlint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(smlint_y,smlint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((smlint_y)::double precision, (smlint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((smlint_y)::double precision, (smlint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlint_x,smlint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((smlint_x)::double precision, (smlint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((smlint_x)::double precision, (smlint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlint_y,smlint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((smlint_y)::double precision, (smlint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((smlint_y)::double precision, (smlint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlint_x,smlint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((smlint_x)::double precision, (smlint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((smlint_x)::double precision, (smlint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlint_y,smlint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((smlint_y)::double precision, (smlint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((smlint_y)::double precision, (smlint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(integer_x,integer_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((integer_x)::double precision, (integer_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((integer_x)::double precision, (integer_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(integer_y,integer_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((integer_y)::double precision, (integer_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((integer_y)::double precision, (integer_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(integer_x,integer_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((integer_x)::double precision, (integer_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((integer_x)::double precision, (integer_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(integer_y,integer_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((integer_y)::double precision, (integer_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((integer_y)::double precision, (integer_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(integer_x,integer_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((integer_x)::double precision, (integer_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((integer_x)::double precision, (integer_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(integer_y,integer_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((integer_y)::double precision, (integer_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((integer_y)::double precision, (integer_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigint_x,bigint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((bigint_x)::double precision, (bigint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((bigint_x)::double precision, (bigint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigint_y,bigint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((bigint_y)::double precision, (bigint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((bigint_y)::double precision, (bigint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigint_x,bigint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((bigint_x)::double precision, (bigint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((bigint_x)::double precision, (bigint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigint_y,bigint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((bigint_y)::double precision, (bigint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((bigint_y)::double precision, (bigint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigint_x,bigint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((bigint_x)::double precision, (bigint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((bigint_x)::double precision, (bigint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigint_y,bigint_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((bigint_y)::double precision, (bigint_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((bigint_y)::double precision, (bigint_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(real_x,real_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((real_x)::double precision, (real_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((real_x)::double precision, (real_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(real_y,real_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((real_y)::double precision, (real_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((real_y)::double precision, (real_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(real_x,real_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((real_x)::double precision, (real_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((real_x)::double precision, (real_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(real_y,real_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((real_y)::double precision, (real_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((real_y)::double precision, (real_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(real_x,real_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((real_x)::double precision, (real_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((real_x)::double precision, (real_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(real_y,real_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((real_y)::double precision, (real_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((real_y)::double precision, (real_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(float_x,float_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr(float_x, float_z))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr(float_x, float_z)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(float_y,float_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr(float_y, float_z))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr(float_y, float_z)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(float_x,float_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop(float_x, float_z))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop(float_x, float_z)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(float_y,float_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop(float_y, float_z))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop(float_y, float_z)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(float_x,float_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp(float_x, float_z))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp(float_x, float_z)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(float_y,float_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp(float_y, float_z))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp(float_y, float_z)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(nume_x,nume_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((nume_x)::double precision, (nume_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((nume_x)::double precision, (nume_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(nume_y,nume_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((nume_y)::double precision, (nume_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((nume_y)::double precision, (nume_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(nume_x,nume_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((nume_x)::double precision, (nume_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((nume_x)::double precision, (nume_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(nume_y,nume_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((nume_y)::double precision, (nume_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((nume_y)::double precision, (nume_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(nume_x,nume_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((nume_x)::double precision, (nume_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((nume_x)::double precision, (nume_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(nume_y,nume_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((nume_y)::double precision, (nume_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((nume_y)::double precision, (nume_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(smlsrl_x,smlsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((smlsrl_x)::double precision, (smlsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((smlsrl_x)::double precision, (smlsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(smlsrl_y,smlsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((smlsrl_y)::double precision, (smlsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((smlsrl_y)::double precision, (smlsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlsrl_x,smlsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((smlsrl_x)::double precision, (smlsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((smlsrl_x)::double precision, (smlsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlsrl_y,smlsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((smlsrl_y)::double precision, (smlsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((smlsrl_y)::double precision, (smlsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlsrl_x,smlsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((smlsrl_x)::double precision, (smlsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((smlsrl_x)::double precision, (smlsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlsrl_y,smlsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((smlsrl_y)::double precision, (smlsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((smlsrl_y)::double precision, (smlsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(serial_x,serial_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((serial_x)::double precision, (serial_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((serial_x)::double precision, (serial_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(serial_y,serial_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((serial_y)::double precision, (serial_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((serial_y)::double precision, (serial_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(serial_x,serial_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((serial_x)::double precision, (serial_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((serial_x)::double precision, (serial_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(serial_y,serial_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((serial_y)::double precision, (serial_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((serial_y)::double precision, (serial_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(serial_x,serial_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((serial_x)::double precision, (serial_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((serial_x)::double precision, (serial_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(serial_y,serial_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((serial_y)::double precision, (serial_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((serial_y)::double precision, (serial_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigsrl_x,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((bigsrl_x)::double precision, (bigsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((bigsrl_x)::double precision, (bigsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,corr(bigsrl_y,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (corr((bigsrl_y)::double precision, (bigsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, corr((bigsrl_y)::double precision, (bigsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigsrl_x,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((bigsrl_x)::double precision, (bigsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((bigsrl_x)::double precision, (bigsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigsrl_y,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_pop((bigsrl_y)::double precision, (bigsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_pop((bigsrl_y)::double precision, (bigsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigsrl_x,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((bigsrl_x)::double precision, (bigsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((bigsrl_x)::double precision, (bigsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigsrl_y,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                           QUERY PLAN                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (covar_samp((bigsrl_y)::double precision, (bigsrl_z)::double precision))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, covar_samp((bigsrl_y)::double precision, (bigsrl_z)::double precision)
         Group Key: strom_mix.key
         ->  Seq Scan on public.strom_mix
               Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
(8 rows)

set pg_strom.enabled=on;
explain (verbose, costs off, timing off) select key,corr(smlint_x,smlint_z) from strom_mix group by key order by key;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(smlint_y,smlint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlint_x,smlint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlint_y,smlint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlint_x,smlint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_z)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlint_y,smlint_z) from strom_mix group by key order by key;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision)), (pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlint_y)::double precision IS NOT NULL), ((smlint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_x2(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_y(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_y2(true, (smlint_y)::double precision, (smlint_z)::double precision), pgstrom.pcov_xy(true, (smlint_y)::double precision, (smlint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(integer_x,integer_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(integer_y,integer_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(integer_x,integer_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(integer_y,integer_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(integer_x,integer_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_z)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(integer_y,integer_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision)), (pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((integer_y)::double precision IS NOT NULL), ((integer_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_x2(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_y(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_y2(true, (integer_y)::double precision, (integer_z)::double precision), pgstrom.pcov_xy(true, (integer_y)::double precision, (integer_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(bigint_x,bigint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(bigint_y,bigint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigint_x,bigint_z) from strom_mix group by key order by key;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigint_y,bigint_z) from strom_mix group by key order by key;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigint_x,bigint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_z)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigint_y,bigint_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision)), (pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigint_y)::double precision IS NOT NULL), ((bigint_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_x2(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_y(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_y2(true, (bigint_y)::double precision, (bigint_z)::double precision), pgstrom.pcov_xy(true, (bigint_y)::double precision, (bigint_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(real_x,real_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(real_y,real_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(real_x,real_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(real_y,real_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(real_x,real_z) from strom_mix group by key order by key;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_z)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(real_y,real_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision)), (pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((real_y)::double precision IS NOT NULL), ((real_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_x2(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_y(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_y2(true, (real_y)::double precision, (real_z)::double precision), pgstrom.pcov_xy(true, (real_y)::double precision, (real_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(float_x,float_z) from strom_mix group by key order by key;
                                                                                                                                                      QUERY PLAN                                                                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_z)), (pgstrom.pcov_x2(true, float_x, float_z)), (pgstrom.pcov_y(true, float_x, float_z)), (pgstrom.pcov_y2(true, float_x, float_z)), (pgstrom.pcov_xy(true, float_x, float_z))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_z)), (pgstrom.pcov_x2(true, float_x, float_z)), (pgstrom.pcov_y(true, float_x, float_z)), (pgstrom.pcov_y2(true, float_x, float_z)), (pgstrom.pcov_xy(true, float_x, float_z)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_z), pgstrom.pcov_x2(true, float_x, float_z), pgstrom.pcov_y(true, float_x, float_z), pgstrom.pcov_y2(true, float_x, float_z), pgstrom.pcov_xy(true, float_x, float_z)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(float_y,float_z) from strom_mix group by key order by key;
                                                                                                                                                      QUERY PLAN                                                                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_y, float_z)), (pgstrom.pcov_x2(true, float_y, float_z)), (pgstrom.pcov_y(true, float_y, float_z)), (pgstrom.pcov_y2(true, float_y, float_z)), (pgstrom.pcov_xy(true, float_y, float_z))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_y, float_z)), (pgstrom.pcov_x2(true, float_y, float_z)), (pgstrom.pcov_y(true, float_y, float_z)), (pgstrom.pcov_y2(true, float_y, float_z)), (pgstrom.pcov_xy(true, float_y, float_z)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL)), pgstrom.pcov_x(true, float_y, float_z), pgstrom.pcov_x2(true, float_y, float_z), pgstrom.pcov_y(true, float_y, float_z), pgstrom.pcov_y2(true, float_y, float_z), pgstrom.pcov_xy(true, float_y, float_z)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(float_x,float_z) from strom_mix group by key order by key;
                                                                                                                                                         QUERY PLAN                                                                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_z)), (pgstrom.pcov_x2(true, float_x, float_z)), (pgstrom.pcov_y(true, float_x, float_z)), (pgstrom.pcov_y2(true, float_x, float_z)), (pgstrom.pcov_xy(true, float_x, float_z))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_z)), (pgstrom.pcov_x2(true, float_x, float_z)), (pgstrom.pcov_y(true, float_x, float_z)), (pgstrom.pcov_y2(true, float_x, float_z)), (pgstrom.pcov_xy(true, float_x, float_z)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_z), pgstrom.pcov_x2(true, float_x, float_z), pgstrom.pcov_y(true, float_x, float_z), pgstrom.pcov_y2(true, float_x, float_z), pgstrom.pcov_xy(true, float_x, float_z)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(float_y,float_z) from strom_mix group by key order by key;
                                                                                                                                                         QUERY PLAN                                                                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_y, float_z)), (pgstrom.pcov_x2(true, float_y, float_z)), (pgstrom.pcov_y(true, float_y, float_z)), (pgstrom.pcov_y2(true, float_y, float_z)), (pgstrom.pcov_xy(true, float_y, float_z))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_y, float_z)), (pgstrom.pcov_x2(true, float_y, float_z)), (pgstrom.pcov_y(true, float_y, float_z)), (pgstrom.pcov_y2(true, float_y, float_z)), (pgstrom.pcov_xy(true, float_y, float_z)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL)), pgstrom.pcov_x(true, float_y, float_z), pgstrom.pcov_x2(true, float_y, float_z), pgstrom.pcov_y(true, float_y, float_z), pgstrom.pcov_y2(true, float_y, float_z), pgstrom.pcov_xy(true, float_y, float_z)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(float_x,float_z) from strom_mix group by key order by key;
                                                                                                                                                         QUERY PLAN                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_z)), (pgstrom.pcov_x2(true, float_x, float_z)), (pgstrom.pcov_y(true, float_x, float_z)), (pgstrom.pcov_y2(true, float_x, float_z)), (pgstrom.pcov_xy(true, float_x, float_z))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_z)), (pgstrom.pcov_x2(true, float_x, float_z)), (pgstrom.pcov_y(true, float_x, float_z)), (pgstrom.pcov_y2(true, float_x, float_z)), (pgstrom.pcov_xy(true, float_x, float_z)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_x IS NOT NULL), (float_z IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_z), pgstrom.pcov_x2(true, float_x, float_z), pgstrom.pcov_y(true, float_x, float_z), pgstrom.pcov_y2(true, float_x, float_z), pgstrom.pcov_xy(true, float_x, float_z)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(float_y,float_z) from strom_mix group by key order by key;
                                                                                                                                                         QUERY PLAN                                                                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_y, float_z)), (pgstrom.pcov_x2(true, float_y, float_z)), (pgstrom.pcov_y(true, float_y, float_z)), (pgstrom.pcov_y2(true, float_y, float_z)), (pgstrom.pcov_xy(true, float_y, float_z))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL))), (pgstrom.pcov_x(true, float_y, float_z)), (pgstrom.pcov_x2(true, float_y, float_z)), (pgstrom.pcov_y(true, float_y, float_z)), (pgstrom.pcov_y2(true, float_y, float_z)), (pgstrom.pcov_xy(true, float_y, float_z)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((float_y IS NOT NULL), (float_z IS NOT NULL)), pgstrom.pcov_x(true, float_y, float_z), pgstrom.pcov_x2(true, float_y, float_z), pgstrom.pcov_y(true, float_y, float_z), pgstrom.pcov_y2(true, float_y, float_z), pgstrom.pcov_xy(true, float_y, float_z)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(nume_x,nume_z) from strom_mix group by key order by key;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(nume_y,nume_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(nume_x,nume_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(nume_y,nume_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(nume_x,nume_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_z)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(nume_y,nume_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision)), (pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((nume_y)::double precision IS NOT NULL), ((nume_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_x2(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_y(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_y2(true, (nume_y)::double precision, (nume_z)::double precision), pgstrom.pcov_xy(true, (nume_y)::double precision, (nume_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(smlsrl_x,smlsrl_z) from strom_mix group by key order by key;
                                                                                                                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                                                                                                                     

 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(smlsrl_y,smlsrl_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlsrl_x,smlsrl_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(smlsrl_y,smlsrl_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlsrl_x,smlsrl_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(smlsrl_y,smlsrl_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((smlsrl_y)::double precision IS NOT NULL), ((smlsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_x2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_y2(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision), pgstrom.pcov_xy(true, (smlsrl_y)::double precision, (smlsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(serial_x,serial_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(serial_y,serial_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(serial_x,serial_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(serial_y,serial_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(serial_x,serial_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_z)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(serial_y,serial_z) from strom_mix group by key order by key;
                                                                                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                                                                                        

 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision)), (pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((serial_y)::double precision IS NOT NULL), ((serial_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_x2(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_y(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_y2(true, (serial_y)::double precision, (serial_z)::double precision), pgstrom.pcov_xy(true, (serial_y)::double precision, (serial_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(bigsrl_x,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                                                                                                                                                                    QUERY PLAN                                                                                                                                                                                                                                                                                     

 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,corr(bigsrl_y,bigsrl_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.corr((pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.corr((pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigsrl_x,bigsrl_z) from strom_mix group by key order by key;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_pop(bigsrl_y,bigsrl_z) from strom_mix group by key order by key;


 Sort
   Output: key, (pgstrom.covar_pop((pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_pop((pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigsrl_x,bigsrl_z) from strom_mix group by key order by key;
                                                                                                                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                                                                                                                        

 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose, costs off, timing off) select key,covar_samp(bigsrl_y,bigsrl_z) from strom_mix group by key order by key;set client_min_messages to warning;


 Sort
   Output: key, (pgstrom.covar_samp((pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision))))
   Sort Key: strom_mix.key
   ->  HashAggregate
         Output: key, pgstrom.covar_samp((pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)))
         Group Key: strom_mix.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows(((bigsrl_y)::double precision IS NOT NULL), ((bigsrl_z)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_x2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_y2(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision), pgstrom.pcov_xy(true, (bigsrl_y)::double precision, (bigsrl_z)::double precision)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_mix
                     Output: id, key, smlint_x, smlint_y, smlint_z, integer_x, integer_y, integer_z, bigint_x, bigint_y, bigint_z, real_x, real_y, real_z, float_x, float_y, float_z, nume_x, nume_y, nume_z, smlsrl_x, smlsrl_y, smlsrl_z, serial_x, serial_y, serial_z, bigsrl_x, bigsrl_y, bigsrl_z
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

-- explain zero query case.
set pg_strom.enabled=off;
explain (verbose, costs off, timing off) select avg(smlint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(smlint_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(smlint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(smlint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(smlint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(smlint_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(smlint_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(smlint_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(smlint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(smlint_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(smlint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(smlint_x,smlint_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((smlint_x)::double precision, (smlint_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(smlint_x,smlint_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((smlint_x)::double precision, (smlint_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(smlint_x,smlint_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((smlint_x)::double precision, (smlint_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(integer_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(integer_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(integer_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(integer_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(integer_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(integer_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(integer_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(integer_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(integer_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(integer_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(integer_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(integer_x,integer_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((integer_x)::double precision, (integer_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(integer_x,integer_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((integer_x)::double precision, (integer_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(integer_x,integer_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((integer_x)::double precision, (integer_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(bigint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(bigint_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(bigint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(bigint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(bigint_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(bigint_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(bigint_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(bigint_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(bigint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(bigint_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(bigint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(bigint_x,bigint_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((bigint_x)::double precision, (bigint_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(bigint_x,bigint_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((bigint_x)::double precision, (bigint_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(bigint_x,bigint_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((bigint_x)::double precision, (bigint_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(real_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(real_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(real_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(real_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(real_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(real_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(real_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(real_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(real_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(real_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(real_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(real_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(real_x,real_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((real_x)::double precision, (real_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(real_x,real_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((real_x)::double precision, (real_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(real_x,real_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((real_x)::double precision, (real_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(float_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(float_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(float_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(float_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(float_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(float_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(float_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(float_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(float_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(float_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(float_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(float_x,float_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr(float_x, float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(float_x,float_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop(float_x, float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(float_x,float_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp(float_x, float_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(nume_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(nume_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(nume_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(nume_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(nume_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(nume_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(nume_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(nume_x,nume_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((nume_x)::double precision, (nume_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(nume_x,nume_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((nume_x)::double precision, (nume_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(nume_x,nume_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((nume_x)::double precision, (nume_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(smlsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(smlsrl_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(smlsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(smlsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(smlsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(smlsrl_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(smlsrl_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(smlsrl_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(smlsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(smlsrl_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(smlsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(smlsrl_x,smlsrl_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((smlsrl_x)::double precision, (smlsrl_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(smlsrl_x,smlsrl_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((smlsrl_x)::double precision, (smlsrl_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(smlsrl_x,smlsrl_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((smlsrl_x)::double precision, (smlsrl_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(serial_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(serial_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(serial_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(serial_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(serial_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(serial_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(serial_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(serial_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(serial_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(serial_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(serial_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(serial_x,serial_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((serial_x)::double precision, (serial_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(serial_x,serial_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((serial_x)::double precision, (serial_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(serial_x,serial_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((serial_x)::double precision, (serial_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select avg(bigsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(bigsrl_x)          from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select max(bigsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(bigsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(bigsrl_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(bigsrl_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(bigsrl_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(bigsrl_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(bigsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(bigsrl_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(bigsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(bigsrl_x,bigsrl_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: corr((bigsrl_x)::double precision, (bigsrl_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_pop(bigsrl_x,bigsrl_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_pop((bigsrl_x)::double precision, (bigsrl_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select covar_samp(bigsrl_x,bigsrl_x) from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: covar_samp((bigsrl_x)::double precision, (bigsrl_x)::double precision)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

set pg_strom.enabled=on;
explain (verbose, costs off, timing off) select avg(smlint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg((pgstrom.nrows((smlint_x IS NOT NULL))), (pgstrom.psum((smlint_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((smlint_x IS NOT NULL)), pgstrom.psum((smlint_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(smlint_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((smlint_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((smlint_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(smlint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(smlint_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(smlint_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(smlint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(smlint_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(smlint_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(smlint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum((pgstrom.psum((smlint_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum((smlint_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(smlint_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(smlint_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(smlint_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(smlint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(smlint_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(smlint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(smlint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(smlint_x,smlint_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(smlint_x,smlint_x) from strom_zero_test ;
                                                                                                                                                                                                                                                                                 QUERY PLAN                                                                                                                                                                                                                                                                                  

 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(smlint_x,smlint_x) from strom_zero_test ;
                                                                                                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision)), (pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((smlint_x)::double precision IS NOT NULL), ((smlint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_x2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_y2(true, (smlint_x)::double precision, (smlint_x)::double precision), pgstrom.pcov_xy(true, (smlint_x)::double precision, (smlint_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(integer_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg((pgstrom.nrows((integer_x IS NOT NULL))), (pgstrom.psum((integer_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((integer_x IS NOT NULL)), pgstrom.psum((integer_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(integer_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((integer_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((integer_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(integer_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(integer_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(integer_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(integer_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(integer_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(integer_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(integer_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum((pgstrom.psum((integer_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum((integer_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(integer_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(integer_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(integer_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(integer_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(integer_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(integer_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(integer_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(integer_x,integer_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(integer_x,integer_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(integer_x,integer_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision)), (pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((integer_x)::double precision IS NOT NULL), ((integer_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_x2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_y2(true, (integer_x)::double precision, (integer_x)::double precision), pgstrom.pcov_xy(true, (integer_x)::double precision, (integer_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(bigint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg_int8((pgstrom.nrows((bigint_x IS NOT NULL))), (pgstrom.psum(bigint_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((bigint_x IS NOT NULL)), pgstrom.psum(bigint_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(bigint_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((bigint_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((bigint_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(bigint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(bigint_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(bigint_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(bigint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(bigint_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(bigint_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(bigint_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((pgstrom.psum(bigint_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum(bigint_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(bigint_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(bigint_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(bigint_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(bigint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(bigint_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(bigint_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(bigint_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(bigint_x,bigint_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(bigint_x,bigint_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(bigint_x,bigint_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision)), (pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((bigint_x)::double precision IS NOT NULL), ((bigint_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_x2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_y2(true, (bigint_x)::double precision, (bigint_x)::double precision), pgstrom.pcov_xy(true, (bigint_x)::double precision, (bigint_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(real_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(real_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((real_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(real_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(real_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(real_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(real_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(real_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(real_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(real_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((pgstrom.psum(real_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum(real_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(real_x)         from strom_zero_test ;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.stddev((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev_pop(real_x)     from strom_zero_test ;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.stddev_pop((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev_samp(real_x)    from strom_zero_test ;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.stddev_samp((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select variance(real_x)       from strom_zero_test ;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.variance((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select var_pop(real_x)        from strom_zero_test ;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.var_pop((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select var_samp(real_x)       from strom_zero_test ;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.var_samp((pgstrom.nrows((real_x IS NOT NULL))), (pgstrom.psum((real_x)::double precision)), (pgstrom.psum_x2((real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((real_x IS NOT NULL)), pgstrom.psum((real_x)::double precision), pgstrom.psum_x2((real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select corr(real_x,real_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(real_x,real_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(real_x,real_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision)), (pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((real_x)::double precision IS NOT NULL), ((real_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_x2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_y2(true, (real_x)::double precision, (real_x)::double precision), pgstrom.pcov_xy(true, (real_x)::double precision, (real_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(float_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(float_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((float_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(float_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(float_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(float_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((pgstrom.psum(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(float_x)         from strom_zero_test ;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.stddev((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev_pop(float_x)     from strom_zero_test ;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.stddev_pop((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev_samp(float_x)    from strom_zero_test ;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.stddev_samp((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select variance(float_x)       from strom_zero_test ;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.variance((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select var_pop(float_x)        from strom_zero_test ;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.var_pop((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select var_samp(float_x)       from strom_zero_test ;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.var_samp((pgstrom.nrows((float_x IS NOT NULL))), (pgstrom.psum(float_x)), (pgstrom.psum_x2(float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL)), pgstrom.psum(float_x), pgstrom.psum_x2(float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select corr(float_x,float_x) from strom_zero_test ;
                                                                                                                                                 QUERY PLAN                                                                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.corr((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_x), pgstrom.pcov_x2(true, float_x, float_x), pgstrom.pcov_y(true, float_x, float_x), pgstrom.pcov_y2(true, float_x, float_x), pgstrom.pcov_xy(true, float_x, float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(float_x,float_x) from strom_zero_test ;
                                                                                                                                                   QUERY PLAN                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_x), pgstrom.pcov_x2(true, float_x, float_x), pgstrom.pcov_y(true, float_x, float_x), pgstrom.pcov_y2(true, float_x, float_x), pgstrom.pcov_xy(true, float_x, float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(float_x,float_x) from strom_zero_test ;
                                                                                                                                                    QUERY PLAN                                                                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL))), (pgstrom.pcov_x(true, float_x, float_x)), (pgstrom.pcov_x2(true, float_x, float_x)), (pgstrom.pcov_y(true, float_x, float_x)), (pgstrom.pcov_y2(true, float_x, float_x)), (pgstrom.pcov_xy(true, float_x, float_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((float_x IS NOT NULL), (float_x IS NOT NULL)), pgstrom.pcov_x(true, float_x, float_x), pgstrom.pcov_x2(true, float_x, float_x), pgstrom.pcov_y(true, float_x, float_x), pgstrom.pcov_y2(true, float_x, float_x), pgstrom.pcov_xy(true, float_x, float_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select count(nume_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((nume_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((nume_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select min(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select sum(nume_x)            from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev(nume_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(nume_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(nume_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(nume_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(nume_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(nume_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(nume_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(nume_x,nume_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(nume_x,nume_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(nume_x,nume_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision)), (pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((nume_x)::double precision IS NOT NULL), ((nume_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_x2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_y2(true, (nume_x)::double precision, (nume_x)::double precision), pgstrom.pcov_xy(true, (nume_x)::double precision, (nume_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(smlsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg((pgstrom.nrows((smlsrl_x IS NOT NULL))), (pgstrom.psum((smlsrl_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((smlsrl_x IS NOT NULL)), pgstrom.psum((smlsrl_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(smlsrl_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((smlsrl_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((smlsrl_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(smlsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(smlsrl_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(smlsrl_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(smlsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(smlsrl_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(smlsrl_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(smlsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum((pgstrom.psum((smlsrl_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum((smlsrl_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(smlsrl_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(smlsrl_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(smlsrl_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(smlsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(smlsrl_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(smlsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(smlsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(smlsrl_x,smlsrl_x) from strom_zero_test ;
                                                                                                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                                                                                               

 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(smlsrl_x,smlsrl_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(smlsrl_x,smlsrl_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)), (pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((smlsrl_x)::double precision IS NOT NULL), ((smlsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_x2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_y2(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision), pgstrom.pcov_xy(true, (smlsrl_x)::double precision, (smlsrl_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(serial_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg((pgstrom.nrows((serial_x IS NOT NULL))), (pgstrom.psum((serial_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((serial_x IS NOT NULL)), pgstrom.psum((serial_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(serial_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((serial_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((serial_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(serial_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(serial_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(serial_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(serial_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(serial_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(serial_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(serial_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum((pgstrom.psum((serial_x)::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum((serial_x)::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(serial_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(serial_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(serial_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(serial_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(serial_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(serial_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(serial_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(serial_x,serial_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(serial_x,serial_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(serial_x,serial_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision)), (pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((serial_x)::double precision IS NOT NULL), ((serial_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_x2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_y2(true, (serial_x)::double precision, (serial_x)::double precision), pgstrom.pcov_xy(true, (serial_x)::double precision, (serial_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select avg(bigsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.avg_int8((pgstrom.nrows((bigsrl_x IS NOT NULL))), (pgstrom.psum(bigsrl_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((bigsrl_x IS NOT NULL)), pgstrom.psum(bigsrl_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select count(bigsrl_x)          from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((bigsrl_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((bigsrl_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select max(bigsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(bigsrl_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(bigsrl_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select min(bigsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(bigsrl_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(bigsrl_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select sum(bigsrl_x)            from strom_zero_test ;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((pgstrom.psum(bigsrl_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum(bigsrl_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select stddev(bigsrl_x)         from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_pop(bigsrl_x)     from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_pop(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select stddev_samp(bigsrl_x)    from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: stddev_samp(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select variance(bigsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: variance(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_pop(bigsrl_x)        from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_pop(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select var_samp(bigsrl_x)       from strom_zero_test ;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: var_samp(bigsrl_x)
   ->  Seq Scan on public.strom_zero_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose, costs off, timing off) select corr(bigsrl_x,bigsrl_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.corr((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_pop(bigsrl_x,bigsrl_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_pop((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose, costs off, timing off) select covar_samp(bigsrl_x,bigsrl_x) from strom_zero_test ;


 Aggregate
   Output: pgstrom.covar_samp((pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL))), (pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)), (pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows(((bigsrl_x)::double precision IS NOT NULL), ((bigsrl_x)::double precision IS NOT NULL)), pgstrom.pcov_x(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_x2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_y2(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision), pgstrom.pcov_xy(true, (bigsrl_x)::double precision, (bigsrl_x)::double precision)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_zero_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

-- division by zero with GpuPreAggregate
set pg_strom.enabled=off;
explain (verbose on, costs off) select sum(smlint_x/(id%1000)) from strom_test;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((smlint_x / (id % 1000)))
   ->  Seq Scan on public.strom_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose on, costs off) select sum(integer_x/(id%1000)) from strom_test;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((integer_x / (id % 1000)))
   ->  Seq Scan on public.strom_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose on, costs off) select sum(bigint_x/(id%1000)) from strom_test;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((bigint_x / (id % 1000)))
   ->  Seq Scan on public.strom_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose on, costs off) select sum(real_x/(id%1000)) from strom_test;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((real_x / ((id % 1000))::double precision))
   ->  Seq Scan on public.strom_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

explain (verbose on, costs off) select sum(float_x/(id%1000)) from strom_test;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((float_x / ((id % 1000))::double precision))
   ->  Seq Scan on public.strom_test
         Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
(4 rows)

set pg_strom.enabled=on;
explain (verbose on, costs off) select sum(smlint_x/(id%1000)) from strom_test;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum((pgstrom.psum(((smlint_x / (id % 1000)))::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum(((smlint_x / (id % 1000)))::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select sum(integer_x/(id%1000)) from strom_test;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.sum((pgstrom.psum(((integer_x / (id % 1000)))::bigint)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum(((integer_x / (id % 1000)))::bigint)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select sum(bigint_x/(id%1000)) from strom_test;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((pgstrom.psum((bigint_x / (id % 1000)))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum((bigint_x / (id % 1000)))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select sum(real_x/(id%1000)) from strom_test;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((pgstrom.psum((real_x / ((id % 1000))::double precision))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum((real_x / ((id % 1000))::double precision))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select sum(float_x/(id%1000)) from strom_test;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((pgstrom.psum((float_x / ((id % 1000))::double precision))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.psum((float_x / ((id % 1000))::double precision))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_test
               Output: id, key, smlint_x, integer_x, bigint_x, real_x, float_x, nume_x, smlsrl_x, serial_x, bigsrl_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

--explain GpuPreAggregation for Data/Time types
set pg_strom.enabled=off;
explain (verbose on, costs off) select key,max(timestamp_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(timestamp_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(timestamp_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,max(timestamptz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(timestamptz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(timestamptz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,max(date_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(date_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(date_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,max(time_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(time_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(time_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,max(timetz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(timetz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(timetz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,max(interval_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(interval_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(interval_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(timestamp_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(timestamp_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(timestamp_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(timestamptz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(timestamptz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(timestamptz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(date_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(date_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(date_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(time_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(time_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(time_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(timetz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(timetz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(timetz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(interval_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(interval_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(interval_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,count(timestamp_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(timestamp_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, count(timestamp_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,count(timestamptz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(timestamptz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, count(timestamptz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,count(date_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(date_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, count(date_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,count(time_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(time_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, count(time_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,count(timetz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(timetz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, count(timetz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,count(interval_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (count(interval_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, count(interval_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,avg(time_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg((time_x)::interval))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, avg((time_x)::interval)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,avg(interval_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(interval_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, avg(interval_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select max(timestamp_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(timestamp_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select max(timestamptz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(timestamptz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select max(date_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(date_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select max(time_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(time_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select max(timetz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(timetz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select max(interval_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(interval_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(timestamp_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(timestamp_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(timestamptz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(timestamptz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(date_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(date_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(time_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(time_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(timetz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(timetz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(interval_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(interval_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select count(timestamp_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(timestamp_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select count(timestamptz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(timestamptz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select count(date_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(date_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select count(time_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(time_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select count(timetz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(timetz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select count(interval_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(interval_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select avg(time_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: avg((time_x)::interval)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select avg(interval_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(interval_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

set pg_strom.enabled=on;
explain (verbose on, costs off) select key,max(timestamp_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(timestamp_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(timestamp_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(timestamp_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,max(timestamptz_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(timestamptz_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(timestamptz_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(timestamptz_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,max(date_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(date_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(date_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(date_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,max(time_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max((pgstrom.pmax(time_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max((pgstrom.pmax(time_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmax(time_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,max(timetz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(timetz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(timetz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,max(interval_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (max(interval_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, max(interval_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(timestamp_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(timestamp_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(timestamp_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(timestamp_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,min(timestamptz_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(timestamptz_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(timestamptz_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(timestamptz_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,min(date_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(date_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(date_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(date_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,min(time_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min((pgstrom.pmin(time_x))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min((pgstrom.pmin(time_x)))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.pmin(time_x)
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,min(timetz_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(timetz_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(timetz_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,min(interval_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (min(interval_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, min(interval_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,count(timestamp_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((timestamp_x IS NOT NULL)))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((timestamp_x IS NOT NULL))))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((timestamp_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,count(timestamptz_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((timestamptz_x IS NOT NULL)))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((timestamptz_x IS NOT NULL))))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((timestamptz_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,count(date_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((date_x IS NOT NULL)))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((date_x IS NOT NULL))))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((date_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,count(time_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((time_x IS NOT NULL)))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((time_x IS NOT NULL))))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((time_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,count(timetz_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((timetz_x IS NOT NULL)))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((timetz_x IS NOT NULL))))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((timetz_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,count(interval_x) from strom_time_test group by key order by key;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: key, (pgstrom.count((pgstrom.nrows((interval_x IS NOT NULL)))))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, pgstrom.count((pgstrom.nrows((interval_x IS NOT NULL))))
         Group Key: strom_time_test.key
         ->  Custom Scan (GpuPreAgg)
               Output: key, pgstrom.nrows((interval_x IS NOT NULL))
               Bulkload: On (density: 100.00%)
               Reduction: Local + Global
               Features: format: tuple-slot, bulkload: unsupported
               ->  Custom Scan (BulkScan) on public.strom_time_test
                     Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
                     Features: format: heap-tuple, bulkload: supported
(14 rows)

explain (verbose on, costs off) select key,avg(time_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg((time_x)::interval))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, avg((time_x)::interval)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select key,avg(interval_x) from strom_time_test group by key order by key;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: key, (avg(interval_x))
   Sort Key: strom_time_test.key
   ->  HashAggregate
         Output: key, avg(interval_x)
         Group Key: strom_time_test.key
         ->  Seq Scan on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(8 rows)

explain (verbose on, costs off) select max(timestamp_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(timestamp_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(timestamp_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select max(timestamptz_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(timestamptz_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(timestamptz_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select max(date_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(date_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(date_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select max(time_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: max((pgstrom.pmax(time_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmax(time_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select max(timetz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(timetz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select max(interval_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: max(interval_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(timestamp_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(timestamp_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(timestamp_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select min(timestamptz_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(timestamptz_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(timestamptz_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select min(date_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(date_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(date_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select min(time_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: min((pgstrom.pmin(time_x)))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.pmin(time_x)
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select min(timetz_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(timetz_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select min(interval_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: min(interval_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select count(timestamp_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((timestamp_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((timestamp_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select count(timestamptz_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((timestamptz_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((timestamptz_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select count(date_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((date_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((date_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select count(time_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((time_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((time_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select count(timetz_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((timetz_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((timetz_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select count(interval_x) from strom_time_test;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   Output: pgstrom.count((pgstrom.nrows((interval_x IS NOT NULL))))
   ->  Custom Scan (GpuPreAgg)
         Output: pgstrom.nrows((interval_x IS NOT NULL))
         Bulkload: On (density: 100.00%)
         Reduction: NoGroup
         Features: format: tuple-slot, bulkload: unsupported
         ->  Custom Scan (BulkScan) on public.strom_time_test
               Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
               Features: format: heap-tuple, bulkload: supported
(10 rows)

explain (verbose on, costs off) select avg(time_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: avg((time_x)::interval)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

explain (verbose on, costs off) select avg(interval_x) from strom_time_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: avg(interval_x)
   ->  Seq Scan on public.strom_time_test
         Output: id, key, timestamp_x, timestamptz_x, date_x, time_x, timetz_x, interval_x
(4 rows)

